-- Guardar todas las tablas en un schema exclusivo para el TFG
SET search_path TO tfg;
CREATE SCHEMA IF NOT EXISTS tfg;

DROP TABLE IF EXISTS Users CASCADE;
DROP TABLE IF EXISTS Teams CASCADE;
DROP TABLE IF EXISTS Projects CASCADE;
DROP TABLE IF EXISTS Tasks CASCADE;
DROP TABLE IF EXISTS Chats CASCADE;
DROP TABLE IF EXISTS Messages CASCADE;
DROP TABLE IF EXISTS User_Team CASCADE;
DROP TABLE IF EXISTS User_Project CASCADE;
DROP TABLE IF EXISTS User_Task CASCADE;
DROP TABLE IF EXISTS Scans CASCADE;
DROP TABLE IF EXISTS Services CASCADE;
DROP TABLE IF EXISTS Vulnerabilities CASCADE;

CREATE TABLE Users (
    id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    picture VARCHAR(255) NOT NULL,
    role VARCHAR(255) NOT NULL
);

CREATE TABLE Teams (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Projects (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    team_id INT REFERENCES Teams(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Tasks (
    id SERIAL PRIMARY KEY,
    type VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(255) NOT NULL,
    start_date DATE,
    end_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    project_id INT REFERENCES Projects(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Scans (
    id SERIAL PRIMARY KEY,
    command VARCHAR(255) NOT NULL,
    target_ip VARCHAR(255) NOT NULL,
    operative_system VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    task_id INT REFERENCES Tasks(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Services (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    port INT NOT NULL,
    port_status VARCHAR(255) NOT NULL,
    protocol VARCHAR(255) NOT NULL,
    version VARCHAR(255),
    scan_id INT REFERENCES Scans(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Vulnerabilities (
    id SERIAL PRIMARY KEY,
    cve_id VARCHAR(255) NOT NULL,
    description TEXT,
    base_score FLOAT,
    base_severity VARCHAR(20),
    attack_vector VARCHAR(20),
    attack_complexity VARCHAR(20),
    privileges_required VARCHAR(20),
    user_interaction VARCHAR(20),
    scope VARCHAR(20),
    confidentiality_impact VARCHAR(20),
    integrity_impact VARCHAR(20),
    availability_impact VARCHAR(20),
    service_id INT REFERENCES Services(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Chats (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    project_id INT REFERENCES Projects(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Messages (
    id SERIAL PRIMARY KEY,
    content TEXT NOT NULL,
    _timestamp TIMESTAMP,
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    chat_id INT REFERENCES Chats(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE User_Team (
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    team_id INT REFERENCES Teams(id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (user_id, team_id)
);

CREATE TABLE User_Project (
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    project_id INT REFERENCES Projects(id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (user_id, project_id)
);

CREATE TABLE User_Task (
    user_id VARCHAR(255) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    task_id INT REFERENCES Tasks(id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (user_id, task_id)
);
